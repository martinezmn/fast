name: Deploy to Amazon ECS

on:
  release:
    types: [ created ]

env:
  AWS_REGION: us-east-2                         # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: kapi-application              # set this to your Amazon ECR repository name
  ECS_SERVICE: kapi-application                 # set this to your Amazon ECS service name
  ECS_CLUSTER: kapi-application                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./kapi-application.json  # set this to the path to your Amazon ECS task definition
                                                # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: kapi-application              # set this to the name of the container in the
                                                # containerDefinitions section of your task definition

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.run_number }}
          # IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo API_PORT=80$'\n'API_SALT=6ern32t9q785wynt461nja3iy5kbl98zxuk7is6e4zgpjvh0jxtx14n3n5v7efoa$'\n'API_PROD=false$'\n'$'\n'DB_HOST=kapi-pg-application.c5flffkgxh2m.us-east-2.rds.amazonaws.com$'\n'DB_USER=postgres$'\n'DB_PASS=Gw2xV9RYGdpsaYfK$'\n'DB_NAME=kapi$'\n'$'\n'SMTP_HOST=smtp-relay.sendinblue.com$'\n'SMTP_USER=bism4d@gmail.com$'\n'SMTP_PASS=O867F3BApZYJjqV5$'\n'SMTP_PORT=587$'\n'SMTP_SECURE=false$'\n' > .env
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
